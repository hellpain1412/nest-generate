import {
  <% if (crud) { 
  %>Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  <% if (auth) { %>UseGuards,<% } -%>
<% } -%>
  Controller,
} from '@nestjs/common';
import {<% if (crud) { %> ApiBearerAuth, ApiOperation,<% } -%> ApiTags } from '@nestjs/swagger';
<% if (service) { %>import { <%= nameClass %>Service } from './<%= serviceFileName %>';
<% } -%>
<% if (crud) { %>import { Create<%= nameClass %>Dto, <%= nameClass %>ParamDto, Update<%= nameClass %>Dto } from './dto/<%= dtoFileName %>';
<% } -%>

@ApiTags('<%= camelPascal %>')
@Controller('<%= nameKebabCase %>')
export class <%= nameClass %>Controller {
  constructor(private readonly <%= nameClassCamelCase %>Service: <%= nameClass %>Service) {}
<% if (crud) { 
  %>
  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Create <%= nameNormalCase %>.' })
  @Post()
  async create<%= nameClass %>(@Body() create<%= nameClass %>Dto: Create<%= nameClass %>Dto) {
    return this.<%= nameClassCamelCase %>Service.create<%= nameClass %>(create<%= nameClass %>Dto);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Get all <%= nameNormalCase %>.' })
  @Get()
  async getAll<%= nameClass %>() {
    return this.<%= nameClassCamelCase %>Service.getAll<%= nameClass %>();
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Get <%= nameNormalCase %> by id.' })
  @Get(':id')
  async get<%= nameClass %>ById(@Param('id') { id }: <%= nameClass %>ParamDto) {
    return this.<%= nameClassCamelCase %>Service.get<%= nameClass %>ById(id);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>) 
  <% } -%>@ApiOperation({ summary: 'Update <%= nameNormalCase %> by id.' })
  @Patch(':id')
  async update<%= nameClass %>(
    @Param('id') { id }: <%= nameClass %>ParamDto,
    @Body() update<%= nameClass %>Dto: Update<%= nameClass %>Dto,
  ) {
    return this.<%= nameClassCamelCase %>Service.update<%= nameClass %>(id, update<%= nameClass %>Dto);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Delete <%= nameNormalCase %> by id.' })
  @Delete(':id')
  async remove<%= nameClass %>(@Param('id') { id }: <%= nameClass %>ParamDto) {
    return this.<%= nameClassCamelCase %>Service.remove<%= nameClass %>(id);
  }
<% } -%>
}

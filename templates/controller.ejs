import { Controller, Request, Param, Body, Get, Post, Put, Delete, ParseUUIDPipe<% if (auth) { %>, UseGuards<% } %> } from "@nestjs/common";
<% if (service) { %>import { <%= nameUpper %>Service } from './<%= serviceFileName %>';
<% } else { -%>
<% if (repository) { %>import { <%= nameUpper %>Repository } from './<%= repositoryFileName %>';
<% } else if (crud) { %>import { Repository } from 'typeorm'; <% } -%>
<% } -%>
<% if (model || repository || crud) { %>import { <%= modelClass %> } from './<%= modelDir %><%= modelFileName %>';<% } %>
<% if (auth) { %>import { <%= authGuardClass %> } from '<%= authGuardDir %>';<% } %>

@Controller('/<%= name %>')
export class <%= nameUpper %>Controller {

    public constructor(<% if (service) { %>private readonly <%= name %>Service: <%= nameUpper %>Service<% } -%>
<% if (!service && (repository || crud)) { %>private readonly <%= name %>Repository: <%- repositoryName %><% } %>) {
    }

<% if (crud) { -%>
    @Get('/:id')
    public async getById(id: number): Promise<<%= modelClass %>> {
        <% if (service) { -%>return await this.<%= name %>Service.getById(id);
        <% } else if (repository || crud) { %>return await this.<%= name %>Repository.findOne({ id });<% } %>
    }

    @Post()
<% if (auth) { %>   @UseGuards(<%= authGuardClass %>)<% } -%>
    public create(@Request() req, @Body() body: any): Promise<<%= modelClass %>> {
        <% if (service) { %>let <%= modelClassLower %>: <%= modelClass %> = new <%= modelClass %>();
        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Service.create(req, <%= modelClassLower %>);
        <% } else if (repository || crud) { %>let <%= modelClassLower %>: <%= modelClass %> = new <%= modelClass %>();
        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Repository.save(<%= modelClassLower %>);<% } %>
    }

    @Put('/:id')
<% if (auth) { %>   @UseGuards(<%= authGuardClass %>)<% } -%>
    public async update(@Request() req, @Param('id', ParseUUIDPipe) id: number, @Body() body: any): Promise<<%= modelClass %>> {
        <% if (service) { %>let <%= modelClassLower %>: <%= modelClass %> = await this.<%= name %>Service.getById(id);
        if (!<%= modelClassLower %>) {
            throw "Object <%= modelClassLower %> does not exist";
        }

        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Service.update(req, <%= modelClassLower %>);
        <% } else if (repository || crud) { %>let <%= modelClassLower %>: <%= name %> = await this.<%= name %>Repository.findOne({ id });
        if (!<%= modelClassLower %>) {
            throw "Object <%= modelClassLower %> does not exist";
        } 

        Object.assign(<%= modelClassLower %>, body);
        return this.<%= name %>Repository.save(<%= modelClassLower %>);
    <% } %>
    }

    @Delete('/:id')
<% if (auth) { %>   @UseGuards(<%= authGuardClass %>)<% } -%>
    public async remove(@Request() req, @Param('id', ParseUUIDPipe) id: number, @Body() body: any): Promise<<%= modelClass %>> {
        <% if (service) { %>return this.<%= name %>Service.remove(req, id);
        <% } else if (repository || crud) { %>let <%= modelClassLower %> = await this.<%= name %>Repository.findOne({ id });
        if (!<%= modelClassLower %>) {
            throw "Object <%= modelClassLower %> does not exist";
        }

        await this.<%= name %>Repository.delete(id);
        return <%= name%>;<% } %>
    }

    @Get()
<% if (auth) { %>   UseGuards(<%= authGuardClass %>)<% } -%>
    public async search(@Request() req): Promise<Array<<%= modelClass %>>> {
        <% if (service) { %>return await this.<%= name %>Service.search(req);
        <% } else if (repository || crud) { %>return await this.<%= name %>Repository.find({<% if (auth) { %>where: { user: req.principal }<% } %>});<% } %>
    }<% } %>

}
import {
  <% if (crud) { 
  %>Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  <% if (auth) { %>UseGuards,
<% } -%>
<% } -%>
  Controller,
} from '@nestjs/common';
import {<% if (crud) { %> ApiBearerAuth, ApiOperation,<% } -%> ApiTags } from '@nestjs/swagger';
<% if (service) { %>import { <%= nameUpper %>Service } from './<%= serviceFileName %>';
<% } -%>
<% if (crud) { %>import { Create<%= nameUpper %>Dto, <%= nameUpper %>ParamDto, Update<%= nameUpper %>Dto } from './dto/<%= name %>.dto';
<% } -%>

@ApiTags('<%= nameUpper %>')
@Controller('<%= name %>')
export class <%= nameUpper %>Controller {
  constructor(private readonly <%= name %>Service: <%= nameUpper %>Service) {}
<% if (crud) { 
  %>
  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Create <%= name %>' })
  @Post()
  create(@Body() create<%= nameUpper %>Dto: Create<%= nameUpper %>Dto) {
    return this.<%= name %>Service.create(create<%= nameUpper %>Dto);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Get all <%= name %>' })
  @Get()
  findAll() {
    return this.<%= name %>Service.findAll();
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Get <%= name %> by Id' })
  @Get(':id')
  findOne(@Param('id') { id }: <%= nameUpper %>ParamDto) {
    return this.<%= name %>Service.findOne(id);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>) 
  <% } -%>@ApiOperation({ summary: 'Update <%= name %> by Id' })
  @Patch(':id')
  update(
    @Param('id') { id }: <%= nameUpper %>ParamDto,
    @Body() update<%= nameUpper %>Dto: Update<%= nameUpper %>Dto,
  ) {
    return this.<%= name %>Service.update(id, update<%= nameUpper %>Dto);
  }

  @ApiBearerAuth()
  <% if (auth) { %>@UseGuards(<%= auth %>)
  <% } -%>@ApiOperation({ summary: 'Delete <%= name %> by Id' })
  @Delete(':id')
  remove(@Param('id') { id }: <%= nameUpper %>ParamDto) {
    return this.<%= name %>Service.remove(id);
  }
<% } -%>
}

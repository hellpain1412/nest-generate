import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
<% if (old && schema) { %>
import { <%= schemaClass %>Document } from './interfaces/<%= name %>.interface';
import { <%= schemaClassUpperCase %>_MODEL } from './schemas/<%= name %>.schema';<% } else if (!old && schema) { %>
import { <%= schemaClass %>, <%= schemaClass %>Document } from './schemas/<%= name %>.schema';<% } %>
<% if (crud) { %>import { Create<%= nameUpper %>Dto, Update<%= nameUpper %>Dto } from './dto/<%= name %>.dto';
<% } -%>

@Injectable()
export class <%= nameUpper %>Service {
  constructor(<% if (old && schema) { %>
    @InjectModel(<%= schemaClassUpperCase %>_MODEL)
    private readonly <%= schemaClass %>Model: Model<<%= schemaClass %>Document>,<% } else if (!old && schema) { %>
    @InjectModel(<%= schemaClass %>.name)
    private readonly <%= schemaClass %>Model: Model<<%= schemaClass %>Document>,<% } %>
  ) {}
<% if (crud) { 
  %>
  async create(create<%= nameUpper %>Dto: Create<%= nameUpper %>Dto) {
    return 'This action adds a new <%= name %>';
  }

  async findAll() {
    return `This action returns all <%= name %>`;
  }

  async findOne(id: string) {
    return `This action returns a #${id} <%= name %>`;
  }

  async update(id: string, update<%= nameUpper %>Dto: Update<%= nameUpper %>Dto) {
    return `This action updates a #${id} <%= name %>`;
  }

  async remove(id: string) {
    return `This action removes a #${id} <%= name %>`;
  }
<% } -%>
}

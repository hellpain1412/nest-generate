import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
<% if (old && schema) { %>
import { <%= schemaClass %>Document } from './interfaces/<%= interfaceFileName %>';
import { <%= schemaClassSnakeCase %>_MODEL } from './schemas/<%= schemaFileName %>';<% } else if (!old && schema) { %>
import { <%= schemaClass %>, <%= schemaClass %>Document } from './schemas/<%= schemaFileName %>';<% } %>
<% if (crud) { %>import { Create<%= nameClass %>Dto, Update<%= nameClass %>Dto } from './dto/<%= dtoFileName %>';
<% } -%>

@Injectable()
export class <%= nameClass %>Service {
  constructor(<% if (old && schema) { %>
    @InjectModel(<%= schemaClassSnakeCase %>_MODEL)
    private readonly <%= schemaClass %>Model: Model<<%= schemaClass %>Document>,<% } else if (!old && schema) { %>
    @InjectModel(<%= schemaClass %>.name)
    private readonly <%= schemaClass %>Model: Model<<%= schemaClass %>Document>,<% } %>
  ) {}
<% if (crud) { 
  %>
  async create<%= nameClass %>(create<%= nameClass %>Input: Create<%= nameClass %>Dto) {
    return 'This action adds a new <%= nameNormalCase %>.';
  }

  async getAll<%= nameClass %>() {
    return `This action returns all <%= nameNormalCase %>.`;
  }

  async get<%= nameClass %>ById(<%= nameClassCamelCase %>Id: string) {
    return `This action returns a #${<%= nameClassCamelCase %>Id} <%= nameNormalCase %>.`;
  }

  async update<%= nameClass %>(<%= nameClassCamelCase %>Id: string, update<%= nameClass %>Input: Update<%= nameClass %>Dto) {
    return `This action updates a #${<%= nameClassCamelCase %>Id} <%= nameNormalCase %>.`;
  }

  async remove<%= nameClass %>(<%= nameClassCamelCase %>Id: string) {
    return `This action removes a #${<%= nameClassCamelCase %>Id} <%= nameNormalCase %>.`;
  }
<% } -%>
}
